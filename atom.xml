<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ricardo-vv.github.io/Ricardohome/</id>
    <title>自闭少年羊驼小站</title>
    <updated>2020-06-04T06:46:58.170Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ricardo-vv.github.io/Ricardohome/"/>
    <link rel="self" href="https://ricardo-vv.github.io/Ricardohome/atom.xml"/>
    <subtitle>自闭少年在线打码</subtitle>
    <logo>https://ricardo-vv.github.io/Ricardohome/images/avatar.png</logo>
    <icon>https://ricardo-vv.github.io/Ricardohome/favicon.ico</icon>
    <rights>All rights reserved 2020, 自闭少年羊驼小站</rights>
    <entry>
        <title type="html"><![CDATA[c++详细实现二叉查找树结点的删除]]></title>
        <id>https://ricardo-vv.github.io/Ricardohome/post/cxiang-xi-shi-xian-er-cha-cha-zhao-shu-jie-dian-de-shan-chu/</id>
        <link href="https://ricardo-vv.github.io/Ricardohome/post/cxiang-xi-shi-xian-er-cha-cha-zhao-shu-jie-dian-de-shan-chu/">
        </link>
        <updated>2020-06-04T06:30:56.000Z</updated>
        <content type="html"><![CDATA[<p>💻💡<br>
<ul class="markdownIt-TOC">
<li><a href="#%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E7%9A%84%E5%AE%9A%E4%B9%89">二叉查找树的定义</a></li>
<li><a href="#%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E7%9A%84%E7%BB%93%E7%82%B9%E5%88%A0%E9%99%A4%E5%8E%9F%E7%90%86">二叉查找树的结点删除原理</a>
<ul>
<li><a href="#%E6%89%BE%E5%88%B0%E6%9C%80%E5%A4%A7%E5%89%8D%E9%A9%B1%E7%BB%93%E7%82%B9">找到最大前驱结点</a></li>
<li><a href="#%E6%89%BE%E5%88%B0%E6%9C%80%E5%B0%8F%E5%90%8E%E7%BB%A7%E8%8A%82%E7%82%B9">找到最小后继节点</a></li>
<li><a href="#%E5%AE%9E%E7%8E%B0%E7%BB%93%E7%82%B9%E7%9A%84%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C">实现结点的删除操作</a></li>
</ul>
</li>
<li><a href="#%E5%85%B7%E4%BD%93%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0%E5%8C%85%E5%90%AB%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E7%9A%84%E5%A2%9E-%E5%88%A0-%E6%94%B9-%E6%9F%A5%E6%93%8D%E4%BD%9C">具体源码实现（包含二叉查找树的增、删、改、查操作）</a></li>
</ul>
<br>
在之前的文章中，我们已经实现了<em>二叉查找树</em>的<strong>创建</strong>，以及<strong>查找</strong>、<strong>插入</strong>、<strong>修改</strong>等操作，接下来我们将讲解如何进行结点的删除操作<br>
如果对<em>二叉查找树</em>的<strong>创建</strong>过程还不是熟悉，可以浏览 <a href="https://blog.csdn.net/weixin_42777504/article/details/103413314">c++二叉树查找树的建立</a>这篇文章，里面对于二叉树的实现原理有做详细的讲解</p>
<h1 id="二叉查找树的定义">二叉查找树的定义</h1>
<p>二叉查找树（Binary Search Tree），它或是一棵空树，或者是具有下列性质的二叉树： 若它的<strong>左子树不空</strong>，则左子树上所有结点的值<strong>均小于</strong>它的根结点的值； 若它的<strong>右子树不空</strong>，则右子树上所有结点的值<strong>均大于</strong>它的根结点的值； 它的左、右子树也分别为二叉排序树</p>
<h1 id="二叉查找树的结点删除原理">二叉查找树的结点删除原理</h1>
<ul>
<li>由定义可知，对二叉查找树结点的删除有两种操作
<ul>
<li>第一种是在该节点的<strong>左子树</strong>里面，找到存储着<em>最大值</em>的结点（由于该节点存在于左子树，所以一定<strong>小于</strong>根节点）</li>
<li>第二种是在该节点的<strong>右子树</strong>里面，找到存储着<em>最小值</em>的结点（由于该节点存在于右子树，所以一定<strong>大于</strong>根节点）<br>
<img src="https://img-blog.csdnimg.cn/20191206140926239.png" alt="在这里插入图片描述" loading="lazy"></li>
</ul>
</li>
<li>第一种情况对应将7替换为6</li>
<li>第二种情况对应将7替换为9</li>
</ul>
<h2 id="找到最大前驱结点">找到最大前驱结点</h2>
<ul>
<li>我们将第一种情况定义为找到删除结点的<strong>最大前驱结点</strong>，事实上，所找到的结点的值也恰好是在被删除结点的<strong>前一位</strong></li>
<li>实现源码如下：</li>
</ul>
<pre><code class="language-cpp">node* findMin(node* root) { 
	while (root-&gt;lchild != NULL) {
		root = root-&gt;rchild; //在左子树中不断向右，直到没有右孩子
	}
	return root;
}
</code></pre>
<h2 id="找到最小后继节点">找到最小后继节点</h2>
<ul>
<li>我们将第二种情况定义为找到删除结点的<strong>最小后继结点</strong>，事实上，所找到的结点的值也恰好是在被删除结点的<strong>后一位</strong></li>
<li>实现源码如下</li>
</ul>
<pre><code class="language-cpp">node* findMax(node* root) {
	while (root-&gt;rchild != NULL) {
		root = root-&gt;lchild; //在右子树中不断向左，直到没有左孩子
	}
	return root;
}
</code></pre>
<h2 id="实现结点的删除操作">实现结点的删除操作</h2>
<ul>
<li>
<p>假设我们决定用结点N的前驱结点P来替换N，于是就等于把问题转换为在N的左子树中删除P，按照这个思路，我们就可以一直递归下去，直到递归到最后一个叶子节点，就可以将该节点直接删除了。</p>
</li>
<li>
<p>因此删除的实现思路如下：</p>
<ul>
<li>①如果当前结点为<strong>空</strong>，说明不存在权值为给定<strong>x</strong>的节点，直接返回</li>
<li>②如果当前结点的<strong>权值</strong>恰好等于给定<strong>x</strong>，说明已经找到了目标结点，接下来进入删除操作
<ul>
<li>a.如果当前结点无左右孩子，说明为<strong>叶子节点</strong>，直接删除</li>
<li>b.如果当前结点存在<strong>左孩子</strong>，则在左子树里面寻找<strong>前驱pre</strong>，然后让pre数值覆盖当前节点，接着在左子树里删除<strong>pre</strong></li>
<li>c.如果当前结点存在<strong>右孩子</strong>，则在右子树里面寻找<strong>后继next</strong>，然后让next数值覆盖当前节点，接着在右子树里删除<strong>next</strong></li>
</ul>
</li>
<li>③如果当前结点权值<strong>大于</strong>给定x，则在右子树中递归删除权值为x的结点，反之则在左子树中进行递归删除操作</li>
</ul>
<p>具体实现代码如下：</p>
</li>
</ul>
<pre><code class="language-cpp">void deleteNode(node*&amp; root,int x) {
	if (root == NULL) return; //不存在权值为x的结点
	if(root-&gt;data == x){      //找到欲删除结点
		if (root-&gt;rchild == NULL &amp;&amp; root-&gt;lchild == NULL) {
			root = NULL;      //叶子结点直接删除
		}
		else if (root-&gt;lchild != NULL) { //左子树不为空
			node* pre = findMin(root-&gt;lchild);
			root-&gt;data = pre-&gt;data;  //前驱覆盖root
			deleteNode(root-&gt;lchild, pre-&gt;data); //删除pre
		}
		else {
			node* next = findMax(root-&gt;rchild); //右子树不为空
			root-&gt;data = next-&gt;data; //后继覆盖root
			deleteNode(root-&gt;rchild, next-&gt;data); //删除next
		}
	}
	else if (x &lt; root-&gt;data) { 
		deleteNode(root-&gt;lchild,x); //在左子树删除x
	}
	else deleteNode(root-&gt;rchild,x); //在右子树删除x
}
</code></pre>
<h1 id="具体源码实现包含二叉查找树的增-删-改-查操作">具体源码实现（包含二叉查找树的增、删、改、查操作）</h1>
<pre><code class="language-cpp">#include&lt;iostream&gt;
using namespace std;

struct node{           //结点存储结果定义
	int data;
	node* lchild;
	node* rchild;
};

node* newNode(int v) { //生成新节点
	node* Node = new node;
	Node-&gt;data = v;
	Node-&gt;lchild = Node-&gt;rchild = NULL;
	return Node;
}

void insert(node* &amp;root, int x) { //结点的插入
	if (root == NULL) {
		root = newNode(x);
	}
	if (x == root-&gt;data) return;
	else if(x &lt; root-&gt;data){
		insert(root-&gt;lchild, x);
	}
	else
	{
		insert(root-&gt;rchild, x);
	}
}

node* create(int data[], int n) { //二叉搜索树创建
	node* root = NULL;
	for (int i = 0; i &lt; n; i++) {
		insert(root, data[i]);
	}
	return root;
}
void preorder(node * root) { //前序遍历
	if (root == NULL) return;
	cout &lt;&lt; root-&gt;data&lt;&lt;endl;
	preorder(root-&gt;lchild);
	preorder(root-&gt;rchild);
}

node* findMin(node* root) { 
	while (root-&gt;lchild != NULL) {
		root = root-&gt;rchild; //在左子树中不断向右，直到没有右孩子
	}
	return root;
}

node* findMax(node* root) {
	while (root-&gt;rchild != NULL) {
		root = root-&gt;lchild; //在右子树中不断向左，直到没有左孩子
	}
	return root;
}

void deleteNode(node*&amp; root,int x) {
	if (root == NULL) return; //不存在权值为x的结点
	if(root-&gt;data == x){      //找到欲删除结点
		if (root-&gt;rchild == NULL &amp;&amp; root-&gt;lchild == NULL) {
			root = NULL;      //叶子结点直接删除
		}
		else if (root-&gt;lchild != NULL) { //左子树不为空
			node* pre = findMin(root-&gt;lchild);
			root-&gt;data = pre-&gt;data;  //前驱覆盖root
			deleteNode(root-&gt;lchild, pre-&gt;data); //删除pre
		}
		else {
			node* next = findMax(root-&gt;rchild); //右子树不为空
			root-&gt;data = next-&gt;data; //后继覆盖root
			deleteNode(root-&gt;rchild, next-&gt;data); //删除next
		}
	}
	else if (x &lt; root-&gt;data) { 
		deleteNode(root-&gt;lchild,x); //在左子树删除x
	}
	else deleteNode(root-&gt;rchild,x); //在右子树删除x
}

int main() {
	
	int n = 10;
	int nums[10] = { 5,3,8,2,4,1,6,7,9,0 };
	node* root = create(nums, n);
	//preorder(root);
	deleteNode(root, 5);
	preorder(root);
	system(&quot;pause&quot;);
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[c++二叉树实现]]></title>
        <id>https://ricardo-vv.github.io/Ricardohome/post/cer-cha-shu-shi-xian/</id>
        <link href="https://ricardo-vv.github.io/Ricardohome/post/cer-cha-shu-shi-xian/">
        </link>
        <updated>2020-06-04T05:57:29.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E4%B8%80%E6%A3%B5%E4%BA%8C%E5%8F%89%E6%A0%91">1.如何创建一棵二叉树</a>
<ul>
<li><a href="#1%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E5%AE%9A%E4%B9%89">1.二叉树的存储结构定义</a></li>
<li><a href="#2%E5%AE%9E%E7%8E%B0%E4%BA%8C%E5%8F%89%E6%A0%91%E7%BB%93%E7%82%B9%E7%9A%84%E6%96%B0%E5%BB%BA-%E6%9F%A5%E6%89%BE-%E4%BF%AE%E6%94%B9">2.实现二叉树结点的新建、查找、修改</a></li>
<li><a href="#3%E5%AE%9E%E7%8E%B0%E4%BA%8C%E5%8F%89%E6%A0%91%E7%BB%93%E7%82%B9%E7%9A%84%E6%8F%92%E5%85%A5">3.实现二叉树结点的插入</a></li>
<li><a href="#4%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B">4.二叉树创建过程</a></li>
</ul>
</li>
<li><a href="#2%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86">2.二叉树的遍历</a>
<ul>
<li><a href="#1%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86">1.先序遍历</a></li>
<li><a href="#2%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86">2.中序遍历</a></li>
<li><a href="#3%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86">3.后序遍历</a></li>
<li><a href="#4%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86">4.层序遍历</a></li>
</ul>
</li>
<li><a href="#3%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0">3.源码实现</a></li>
</ul>
</p>
<h1 id="1如何创建一棵二叉树">1.如何创建一棵二叉树</h1>
<p><mark><em>创建一棵二叉树需要什么</em></mark><br>
其实答案很简单，无非就是从根节点开始，逐步实现子节点的创建，从而实现树的整体框架<br>
由于树是一种特殊的<strong>线性表</strong>，所以对于生成后的树，我们应该可以对它进行查找，修改，插入等功能<br>
最后，我们将进行对树的遍历，这里将讨论常用的先序，中序，后序以及层序等四种遍历方式</p>
<h2 id="1二叉树的存储结构定义">1.二叉树的存储结构定义</h2>
<ul>
<li>一般来说，二叉树使用链表来定义，不同的是，由于二叉树每个结点都存在两条出边，因此指针域变为两个，分别指向左子树和右子树的跟结点地址，因此又把这种链表叫做<strong>二叉链表</strong></li>
</ul>
<pre><code class="language-cpp">struct node
{
	int data; //数据域
	node * lchild; //指向左子树根节点的指针
	node * rchild; //指向右子树根节点的指针
};
</code></pre>
<h2 id="2实现二叉树结点的新建-查找-修改">2.实现二叉树结点的新建、查找、修改</h2>
<ul>
<li>如果需要<strong>新建结点</strong>（例如往二叉树里面插入结点时，可使用下面的函数（返回类型是一个指向<em>node</em>的指针）</li>
</ul>
<pre><code class="language-cpp">node* newNode(int v) { 
	node*Node = new node; //申请一个node类型变量的地址空间
	Node-&gt;data = v; //结点权值为v
	Node-&gt;lchild = Node-&gt;rchild = NULL; //初始状态下无左右孩子
	return Node; //返回新节点的地址
}
</code></pre>
<ul>
<li>查找操作是指在给定的<strong>数据域</strong>内，在二叉树里面找到<strong>所有</strong>数据域（对多个结点实行操作）为给定<strong>数据域</strong>的结点，并且对查找到的结点修改为给定的数据域</li>
</ul>
<pre><code class="language-cpp">void search(node*root,int x, int newdata){
	if (root == NULL) return; //考虑为空节点的可能性
	if (root-&gt;data == x) {
		root-&gt;data = newdata; //找到数据域为x的结点，把它修改为newdata
	}
	search(root-&gt;lchild, x, newdata);//往左子树搜索
	search(root-&gt;rchild, x, newdata);//往右子树搜索
}
</code></pre>
<h2 id="3实现二叉树结点的插入">3.实现二叉树结点的插入</h2>
<ul>
<li>关于二叉树结点的插入，由于在没有给出插入条件的问题中，很难给出插入的具体方法。因此这里以在一棵<strong>二叉搜索树</strong>中插入为例。</li>
<li>插入过程的核心思想，是按照给定的<strong>插入条件</strong>（例中为二叉查找树）找到树里面的边界（死胡同），此处就是查找失败的地方，也是结点需要插入的地方</li>
</ul>
<pre><code class="language-cpp">void insert(node*&amp; root, int x) {  //注意 传入的是结点指针的引用
	if (root == NULL) { //空树，即查找失败，插入结点（递归边界）
		root = newNode(x);
		return;
	}
	if (root-&gt;data &gt; x) { //往左子树搜索
		insert(root-&gt;lchild, x);
	}
	else insert(root-&gt;rchild, x); //往右子树搜索
}
</code></pre>
<ul>
<li>在上述代码中，一个关键的点就是根节点指针root使用了<strong>引用&amp;</strong>，这样在函数中可以直接修改原变量。这么做的原因是，在<strong>insert函数</strong>中新建了一个新结点，并且把新节点<strong>的地址</strong>赋给了当层的root。如果不采用引用，root = new node 这个语句对root 的修改就无法作用到原变量，也就无法将节点加到二叉树上面。</li>
<li>那为什么前面的<strong>search 函数</strong>不需要加引用呢？因为search 函数修改的是<strong>指针root指向的内容</strong>，而不是root本身，对结点指向的内容的修改是不需要加引用的</li>
</ul>
<h2 id="4二叉树创建过程">4.二叉树创建过程</h2>
<ul>
<li>二叉树的创建，其实就是二叉树结点的插入过程，比较常用的写法是把需要插入的数据域存储在数组中，并且最终返回插入结点后树的<strong>根结点</strong></li>
</ul>
<pre><code class="language-cpp">node*create(int data[], int n) {
	node* root = NULL;     //新建空根结点
	for (int i = 0; i &lt; n; i++) {
		insert(root, data[i]); //将data[0]到data[n-1]插入二叉树
	}
	return root; //返回根节点
}
</code></pre>
<h1 id="2二叉树的遍历">2.二叉树的遍历</h1>
<ul>
<li>在下文提到的四种遍历方式中，像<strong>先、中、后</strong>三种遍历方式，都是基于深度优先搜索（<em>DFS</em>)，而层序遍历则是基于广度搜索（<em>BFS</em>）</li>
<li>由于树本质上是一种递归结构，因此可以抽象的把树看成<mark>root， 左子树 ，右子树</mark> 三部分，且对左右子树也进行同样的划分</li>
<li>前三种遍历中无论哪一种，都是先开始左子树的遍历，再到右子树。所谓先、中、后则是代表根节点在访问过程中的位置</li>
</ul>
<h2 id="1先序遍历">1.先序遍历</h2>
<ul>
<li>由定义知，先序遍历的遍历顺序是根节点-&gt;左子树-&gt;右子树，由上文提到的抽象思想，对于每个结点都采用相同的遍历思路，直到到达递归边界</li>
</ul>
<p><strong>所以核心问题是处理好 <em>递归式与递归边界</em></strong></p>
<ul>
<li>实现效果图如下：<br>
<img src="https://img-blog.csdnimg.cn/20191205224141111.png" alt="先序遍历" loading="lazy"></li>
<li>代码实现如下：</li>
</ul>
<pre><code class="language-cpp">void preorder(node* root) { //先序遍历
	if (root == NULL) return; //到达空树，即递归边界
	cout &lt;&lt; root-&gt;data &lt;&lt; endl;; //访问根节点数据域
	preorder(root-&gt;lchild); //访问左子树
	preorder(root-&gt;rchild); //访问右子树
}
</code></pre>
<h2 id="2中序遍历">2.中序遍历</h2>
<ul>
<li>中序遍历也是一样的思想，中序遍历的遍历顺序是<em>左子树-&gt;根节点-&gt;右子树</em>，由上文提到的抽象思想，对于每个结点都采用相同的遍历思路，直到到达<strong>递归边界</strong></li>
<li>实现效果图如下：<br>
<img src="https://img-blog.csdnimg.cn/20191205224333807.png" alt="中序遍历" loading="lazy"></li>
<li>代码实现如下：</li>
</ul>
<pre><code class="language-cpp">void inorder(node* root) { //中序遍历
	if (root == NULL) return; //到达空树，即递归边界
	preorder(root-&gt;lchild); //访问左子树
	cout &lt;&lt; root-&gt;data &lt;&lt; endl;; //访问根节点数据域
	preorder(root-&gt;rchild); //访问右子树
}
</code></pre>
<h2 id="3后序遍历">3.后序遍历</h2>
<ul>
<li>后序遍历同上，中序遍历的遍历顺序是<em>左子树-&gt;右子树-&gt;根节点</em>，由上文提到的抽象思想，对于每个结点都采用相同的遍历思路，直到到达<strong>递归边界</strong></li>
<li>实现效果图如下：<br>
<img src="https://img-blog.csdnimg.cn/20191205224454490.png" alt="后序遍历" loading="lazy"></li>
<li>代码实现如下：</li>
</ul>
<pre><code class="language-cpp">void postorder(node* root) { //后序遍历
	if (root == NULL) return; //到达空树，即递归边界
	preorder(root-&gt;lchild); //访问左子树
	preorder(root-&gt;rchild); //访问右子树
	cout &lt;&lt; root-&gt;data &lt;&lt; endl;; //访问根节点数据域
}
</code></pre>
<h2 id="4层序遍历">4.层序遍历</h2>
<ul>
<li>
<p>层序遍历是按照层次顺序从根节点向下逐层进行遍历，且对同一层的结点由左往右进行遍历，由于存在回溯问题，因此需要用到<strong>队列</strong>这种数据结构</p>
</li>
<li>
<p>具体实现思路如下</p>
<ul>
<li>①将根节点root 加入队列q</li>
<li>②取出队首结点，访问它</li>
<li>③若该结点有左孩子，则将左孩子入队</li>
<li>④该结点有有孩子，则将右孩子入队</li>
<li>重复进行步骤②，直到队列为空</li>
</ul>
</li>
<li>
<p>实现效果图如下：<br>
<img src="https://img-blog.csdnimg.cn/20191205224530706.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjc3NzUwNA==,size_16,color_FFFFFF,t_70" alt="层序遍历" loading="lazy"></p>
</li>
<li>
<p>实现代码如下：</p>
</li>
</ul>
<pre><code class="language-cpp">void LayerOrder(node* root) { //层序遍历
	queue&lt;node*&gt; q; //队列里面存的是地址 记得导入头文件&lt;quene&gt;
	q.push(root);  //将根节点入队
	while (!q.empty())  //退出条件为队列为空
	{
		node* now = q.front(); //取出队首元素
		cout &lt;&lt; now-&gt;data &lt;&lt; endl;
		q.pop();        //弹出队首元素
		if (now-&gt;lchild != NULL) q.push(now-&gt;lchild);//左子树非空则压入队列
		if (now-&gt;rchild != NULL) q.push(now-&gt;rchild);//右子树非空则压入队列
	}
}
</code></pre>
<h1 id="3源码实现">3.源码实现</h1>
<pre><code class="language-cpp">#include &lt;iostream&gt;
#include &lt;queue&gt;
using namespace std;

struct node
{
	int data;
	node * lchild;
	node * rchild;
};

node* newNode(int v) { 
	node*Node = new node; //申请一个node类型变量的地址空间
	Node-&gt;data = v; //结点权值为v
	Node-&gt;lchild = Node-&gt;rchild = NULL; //初始状态下无左右孩子
	return Node; //返回新节点的地址
}

void search(node*root,int x, int newdata){
	if (root == NULL) return; //考虑为空节点的可能性
	if (root-&gt;data == x) {
		root-&gt;data = newdata; //找到数据域为x的结点，把它修改为newdata
	}
	search(root-&gt;lchild, x, newdata);//往左子树搜索
	search(root-&gt;rchild, x, newdata);//往右子树搜索
}

void insert(node*&amp; root, int x) {
	if (root == NULL) { //空树，即查找失败，插入结点（递归边界）
		root = newNode(x);
		return;
	}
	if (root-&gt;data &gt; x) { //往左子树搜索
		insert(root-&gt;lchild, x);
	}
	else insert(root-&gt;rchild, x); //往右子树搜索
}

node*create(int data[], int n) {
	node* root = NULL;     //新建空根结点
	for (int i = 0; i &lt; n; i++) {
		insert(root, data[i]); //将data[0]到data[n-1]插入二叉树
	}
	return root; //返回根节点
}

void preorder(node*root) { //先序遍历
	if (root == NULL) return; //到达空树，即递归边界
	cout &lt;&lt; root-&gt;data &lt;&lt; endl;; //访问根节点数据域
	preorder(root-&gt;lchild); //访问左子树
	preorder(root-&gt;rchild); //访问右子树
}

void inorder(node*root) { //中序遍历
	if (root == NULL) return; //到达空树，即递归边界
	preorder(root-&gt;lchild); //访问左子树
	cout &lt;&lt; root-&gt;data &lt;&lt; endl;; //访问根节点数据域
	preorder(root-&gt;rchild); //访问右子树
}
void postorder(node* root) { //后序遍历
	if (root == NULL) return; //到达空树，即递归边界
	preorder(root-&gt;lchild); //访问左子树
	preorder(root-&gt;rchild); //访问右子树
	cout &lt;&lt; root-&gt;data &lt;&lt; endl;; //访问根节点数据域
}

void LayerOrder(node* root) { //层序遍历
	queue&lt;node*&gt; q; //队列里面存的是地址 记得导入头文件&lt;quene&gt;
	q.push(root);  //将根节点入队
	while (!q.empty())  //退出条件为队列为空
	{
		node* now = q.front(); //取出队首元素
		cout &lt;&lt; now-&gt;data &lt;&lt; endl;
		q.pop();        //弹出队首元素
		if (now-&gt;lchild != NULL) q.push(now-&gt;lchild);//左子树非空则压入队列
		if (now-&gt;rchild != NULL) q.push(now-&gt;rchild);//右子树非空则压入队列
	}
}
int main() {
	int n = 10;
	int nums[10] = { 5,3,8,2,4,1,6,7,9,0 };
	node* root = create(nums, 10);
	//search(root, 7, 11); //查找替换
	preorder(root);//前序遍历
	//inorder(root);    //中序遍历
	//postorder(root);  //后序遍历
	//LayerOrder(root);  //层序遍历
	system(&quot;pause&quot;);
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://ricardo-vv.github.io/Ricardohome/post/hello-gridea/</id>
        <link href="https://ricardo-vv.github.io/Ricardohome/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>